{"ast":null,"code":"// Base URL for Spring Boot backend\nconst API_URL = \"http://localhost:8080/api/auth\";\nasync function parseJsonSafe(response) {\n  // Read raw text first to avoid JSON.parse errors when server returns HTML or empty body\n  const text = await response.text();\n  if (!text) return {};\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    // Not JSON — return the raw text under `message` so callers can show something useful\n    return {\n      message: text\n    };\n  }\n}\nexport async function registerUser(email, password, role = 'Voter') {\n  const res = await fetch(`${API_URL}/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password,\n      role\n    })\n  });\n  const data = await parseJsonSafe(res);\n  if (!res.ok) {\n    // prefer server-provided message, fallback to status text\n    throw new Error(data && data.message || res.statusText || 'Registration failed');\n  }\n  return data;\n}\nexport async function loginUser(email, password) {\n  const res = await fetch(`${API_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const data = await parseJsonSafe(res);\n  if (!res.ok) {\n    throw new Error(data && data.message || res.statusText || 'Login failed');\n  }\n  return data;\n}","map":{"version":3,"names":["API_URL","parseJsonSafe","response","text","JSON","parse","err","message","registerUser","email","password","role","res","fetch","method","headers","body","stringify","data","ok","Error","statusText","loginUser"],"sources":["C:/xampp/htdocs/e-voting-blockchain-app/frontend/src/api.js"],"sourcesContent":["// Base URL for Spring Boot backend\r\nconst API_URL = \"http://localhost:8080/api/auth\";\r\n\r\nasync function parseJsonSafe(response) {\r\n  // Read raw text first to avoid JSON.parse errors when server returns HTML or empty body\r\n  const text = await response.text();\r\n  if (!text) return {};\r\n  try {\r\n    return JSON.parse(text);\r\n  } catch (err) {\r\n    // Not JSON — return the raw text under `message` so callers can show something useful\r\n    return { message: text };\r\n  }\r\n}\r\n\r\nexport async function registerUser(email, password, role = 'Voter') {\r\n  const res = await fetch(`${API_URL}/register`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password, role })\r\n  });\r\n  const data = await parseJsonSafe(res);\r\n  if (!res.ok) {\r\n    // prefer server-provided message, fallback to status text\r\n    throw new Error((data && data.message) || res.statusText || 'Registration failed');\r\n  }\r\n  return data;\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n  const res = await fetch(`${API_URL}/login`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password })\r\n  });\r\n  const data = await parseJsonSafe(res);\r\n  if (!res.ok) {\r\n    throw new Error((data && data.message) || res.statusText || 'Login failed');\r\n  }\r\n  return data;\r\n}\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,gCAAgC;AAEhD,eAAeC,aAAaA,CAACC,QAAQ,EAAE;EACrC;EACA,MAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAI,CAAC,CAAC;EAClC,IAAI,CAACA,IAAI,EAAE,OAAO,CAAC,CAAC;EACpB,IAAI;IACF,OAAOC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC;EACzB,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZ;IACA,OAAO;MAAEC,OAAO,EAAEJ;IAAK,CAAC;EAC1B;AACF;AAEA,OAAO,eAAeK,YAAYA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,GAAG,OAAO,EAAE;EAClE,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGb,OAAO,WAAW,EAAE;IAC7Cc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEZ,IAAI,CAACa,SAAS,CAAC;MAAER,KAAK;MAAEC,QAAQ;MAAEC;IAAK,CAAC;EAChD,CAAC,CAAC;EACF,MAAMO,IAAI,GAAG,MAAMjB,aAAa,CAACW,GAAG,CAAC;EACrC,IAAI,CAACA,GAAG,CAACO,EAAE,EAAE;IACX;IACA,MAAM,IAAIC,KAAK,CAAEF,IAAI,IAAIA,IAAI,CAACX,OAAO,IAAKK,GAAG,CAACS,UAAU,IAAI,qBAAqB,CAAC;EACpF;EACA,OAAOH,IAAI;AACb;AAEA,OAAO,eAAeI,SAASA,CAACb,KAAK,EAAEC,QAAQ,EAAE;EAC/C,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGb,OAAO,QAAQ,EAAE;IAC1Cc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEZ,IAAI,CAACa,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,MAAMQ,IAAI,GAAG,MAAMjB,aAAa,CAACW,GAAG,CAAC;EACrC,IAAI,CAACA,GAAG,CAACO,EAAE,EAAE;IACX,MAAM,IAAIC,KAAK,CAAEF,IAAI,IAAIA,IAAI,CAACX,OAAO,IAAKK,GAAG,CAACS,UAAU,IAAI,cAAc,CAAC;EAC7E;EACA,OAAOH,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}